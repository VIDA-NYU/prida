'''
This script parses results generated by different pruning and feature selection strategies.

argv[1] => A file with results (e.g., any file inside folder results/)
'''

import sys
import numpy as np

if __name__=='__main__':

    filename = sys.argv[1]

    initial_user_model_time = float('nan')
    initial_user_model_R2_score = float('nan')
    final_user_model_time = float('nan')
    final_user_model_R2_score = float('nan')
    pruning_time = 0.0
    feature_selection_time = 0.0
    
    with open(filename) as f:
        line = f.readline()
        while line:
            if 'time to create user' in line and np.isnan(initial_user_model_time):
                initial_user_model_time = float(line.strip().split()[-2])
            elif 'time to train' in line or 'time to predict' in line or 'time to prune' in line:
                pruning_time += float(line.strip().split()[-2])
            elif 'time to run feature selector' in line:
                feature_selection_time = float(line.strip().split()[-2])
            elif 'time to create user' in line and not np.isnan(initial_user_model_time):
                final_user_model_time = float(line.strip().split()[-2])
            elif 'R2-score of user model' in line and np.isnan(initial_user_model_R2_score):
                initial_user_model_R2_score = float(line.strip().split()[-1])
            elif 'R2-score of user model' in line and not np.isnan(initial_user_model_R2_score):
                final_user_model_R2_score = float(line.strip().split()[-1])
            line = f.readline()
            
    print('Initial user model time', initial_user_model_time/1000, 'seconds')
    print('Pruning time', pruning_time/1000, 'seconds')
    print('Feature selection time', feature_selection_time/1000, 'seconds')
    print('Final user model time', final_user_model_time/1000, 'seconds')
    print('Total augmentation time', (pruning_time + feature_selection_time + final_user_model_time)/1000, 'seconds')
    print('R2 score before', initial_user_model_R2_score)
    print('R2 score after', final_user_model_R2_score)
